I completed the three Hands-On ML chapter notebooks (03, 08, 09) and then built a small, stand-alone Python application that applies OpenCV’s cv.kmeans to segment images. For the ML notebooks I generated and saved screenshots of: PR and ROC curves (classification), a 3D→2D projection and Swiss roll reduction (dimensionality reduction), the best K-means clustering on 5 blobs, and DBSCAN decision regions on non-linear clusters. I answered the written questions for each part directly in the report.

For the image task, I followed the reference tutorials’ workflow: read the image with OpenCV (BGR), convert to RGB for display, reshape H×W×3 to (H·W)×3 float32, run cv.kmeans with a termination criterion and multiple attempts, then map each pixel label back to its cluster center color and reshape to the original image. The script produces side-by-side PNGs of original vs segmented images. On bricks/Legos I used K=7 to separate brick colors; on the sun image I used K=4 to isolate sky, sun/glow, water, and land (K=3 also works if only sky/water/sun are required). The report explains why Python was chosen, lists disadvantages, and describes the most challenging parts: getting cv.kmeans inputs/outputs and reshaping right, handling BGR/RGB for screenshots, choosing K for the assignment’s semantic classes, and making runs reproducible enough with multiple attempts.